
INTERMEDIATE:- https://vue-cheatsheet.themeselection.com/vue-router/basic.html

Programmatic Navigation
    Aside from using <RouterLink> to create anchor tags for declarative navigation, we can do this programmatically using the router's instance methods.
    Declarative	                      Programmatic
    <RouterLink :to="...">	          router.push(...)
    <RouterLink :to="..." replace>	  router.replace(...)
    window.history.go(n)	            router.go(1)

The argument can be a string path, or a location descriptor object.
ts

// literal string path
router.push('/users/eduardo')

// object with path
router.push({ path: '/users/eduardo' })

// named route with params to let the router build the url
router.push({ name: 'user', params: { username: 'eduardo' } })

// with query, resulting in /register?plan=private
router.replace({ path: '/register', query: { plan: 'private' } })

// with hash, resulting in /about#team
router.replace({ path: '/about', hash: '#team' })

// go forward by one record, the same as router.forward()
router.go(1)

// go back by one record, the same as router.back()
router.go(-1)

---

Dynamic Routing

Dynamic routes are used to match a series of routes with some params to be acquired. (Denoted by colon : )
ts

// src/router/index.ts

const router = createRouter({
  ...
  routes: [
    {
      path: '/product/:id', 
      name: 'product',
      component: () => import('./views/ProductView.vue')
    }
  ]
})

<!-- src/views/ProductView.vue -->

<script setup>
  import { useRoute } from 'vue-router'
  const products = [
      { id: 1, name: Computer },
      { id: 2, name: Laptop },
      ...
  ]

  const route = useRoute()
  const product = products.find(p => p.id === parseInt(route.params.id))
</script>

<template>
 <main>
    <h1>{{ product.name }}</h1>
 </main>
</template>

Catch all / 404 Not found Route
ts

const router = createRouter({
  ...
  routes: [
    // will match everything and put it under `$route.params.pathMatch`
    {
      path: '/:pathMatch(.*)*',
      name: 'NotFound',
      component: () => import('./views/NotFound.vue')  // Component
    },
    // will match anything starting with `/user-` and put it under `$route.params.afterUser`
    {
      path: '/user-:afterUser(.*)',
      component: () => import('./views/UserGeneric.vue')  // Component
    }
  ]
})


Routes' Matching Syntax
      const routes = [
        // matches /o/3549 or /o/books
        { path: '/o/:orderId' },
        
        // /:orderId -> matches only numbers
        { path: '/:orderId(\\d+)' },
      
        // /:productName -> matches anything else
        { path: '/:productName' },
      
        // /:chapters -> matches /one, /one/two, /one/two/three, etc
        { path: '/:chapters+' },
      
        // /:chapters -> matches /, /one, /one/two, /one/two/three, etc
        { path: '/:chapters*' },
      
        // Sensitive and strict route options: match /users/posva but not:
        // - /Users/posva because of sensitive: true
        { path: '/users/:id', sensitive: true },
      
        // - /users/posva/ because of strict: true
        { path: '/users/:id?', strict: true },
      
        // Optional parameters: match /users and /users/posva
        { path: '/users/:userId?' },
      ]
      
Nested Routes

It is used when components that are nested with multiple levels deep.

/user/johnny/profile                     /user/johnny/posts
+------------------+                  +-----------------+
| User             |                  | User            |
| +--------------+ |                  | +-------------+ |
| | Profile      | |  +------------>  | | Posts       | |
| |              | |                  | |             | |
| +--------------+ |                  | +-------------+ |
+------------------+                  +-----------------+

ts

// src/router/index.ts

const router = createRouter({
  ...
  routes: [
    {
      path: '/product/:id',
      name: 'product',
      component: () => import('./views/ProductView.vue'),
      children: [
        {
          path: 'reviews',
          component: () => import('./views/ProductReviews.vue')
        },
        {
          path: 'variations',
          component: () => import('./views/ProductVariations.vue')
        },
      ]
    }
  ]
})

vue

<!-- src/views/Product.vue -->

<template>
  <h1>{{ product.name }}</h1>
  ...
  <RouterView></RouterView>
</template>

Named Views
ts

// display multiple views at the same time
const router = createRouter({
  history: createWebHashHistory(),
  routes: [
    {
      path: '/',
      components: {
        default: Home,
        // short for LeftSidebar: LeftSidebar
        LeftSidebar,
        // they match the `name` attribute on `<router-view>`
        RightSidebar,
      },
    },
  ],
})

vue

<template>
  <RouterView class="view left-sidebar" name="LeftSidebar"></RouterView>
  <RouterView class="view main-content"></RouterView>
  <RouterView class="view right-sidebar" name="RightSidebar"></RouterView>
</template>

---

redirecting
    // targeting a named route
        {
          path: '/home',
          redirect: { name: 'homepage' },
        }

---

Alias
ts

const routes = [
  {
    path: '/users/:id',
    component: UsersByIdLayout,
    children: [
      /* 
        this will render the UserDetails for these 3 URLs
          - /users/24
          - /users/24/profile
          - /24 
      */
      { path: 'profile', component: UserDetails, alias: ['/:id', ''] },
    ],
  },
]

Redirect vs. Alias
A redirect means when the user visits /home, the URL will be replaced by /, and then matched as /.
An alias of / as /home means when the user visits /home, the URL remains /home, but it will be matched as if the user is visiting /.

---

Passing Props to Route Components
vue

<script setup lang='ts'>
const User = {
    // make sure to add a prop named exactly like the route param
    props: ['id'],
    template: '<div>User {{ id }}</div>'
  }
  
const routes = [
  // Boolean mode
  { 
    path: '/user/:id',
    component: User,
    props: true
  },

  // Object mode
  {
    path: '/user/:id',
    components: { default: User, sidebar: Sidebar },
    props: { default: true, sidebar: false }
  },
    
  // Function mode
  {
    path: '/search',
    component: SearchUser,
    props: route => ({ query: route.query.q })
  }
]
</script>

<!-- Via RouterView -->
<template>
  <RouterView v-slot="{ Component }">
    <component
      :is="Component"
      view-prop="value"
    />
  </RouterView>
</template>

---
+++++++++++++++++++++


BASIC: https://learnvue.co/LearnVue-Vue-3-Cheatsheet.pdf 

npm init vite-app <project-name>
cd <project-name>
npm install
npm run dev

Conditional rendering:-
  <div v-if='date == today'>...</div>
  <div v-else-if='!done'>...</div>
  <div v-else>...</div>

  <div v-show='date == today'>...</div> // v-show, all elements already on DOM

Text interpolation:-
    <span> {{ msg }} </span>
    <span v-text='msg'></span

    // innerhtml 
    <span v-html='rawHTML'></span>

 Events 
    Capture and event and call a method
    <div v-on:click='count'>Increase</div>
    <!-- SHORTHAND -->
    <div @click='count'>Increase</div>

    v-on or @ Listens to DOM events
    v-bind or : Reactive updates attribute
    v-model Two way data binding
    v-once Sets val once; Never update  
  
  Event modifiers (usage: v-on:click.stop)
  .stop Stops event propagation
  .once Can only trigger event once
  .prevent Calls evt.preventDefault
  .self Don't send if target = child
  
List :-
    Basic Loop Over Array
    <li v-for='item in items' :key='item'>
    {{ item }}
    </li>

    Loop and Track Index
    <li v-for='(item, index) in items'>
    {{ index }} : {{ item }}
    </li>

    Loop Values in Object
    <li v-for='obj in objects'>
    {{ obj }}
    </li>

Binding Data:-
    BINDING DATA
      Simple Binding
      <div v-bind:id='objectID'>...</div>
      <!-- SHORTHAND -->
      <div :id='objectID'>...</div>
      Two way binding with data and input
      <input v-model='email' />

Input Modifiers
  .lazy updates on change event
  .trim removes extra whitespace
  Use Objects to Bind Class/Styles
  <input :class='{error: hasError}' />
  <input :style='{margin: space+"px"}' />      

    
BIND DATA BETWEEN CHILD & PARENT
    Use v-bind to pass data from parent to child
    and emit a custom event to send data back.

    In Parent, Bind Data & Set Listener to Update
      <custom :msg='s' @update='s = $event'/>

    In Child, Send Back Using emit(event, data)
      context.emit('update', 'hello world')    

SLOTS
Slots allow for content injection from a parent component to a child component.   

        1) BASIC SLOTS
      Child Component (MyButton.Vue)
          <div>
          Hello World
          <slot></slot>
          </div>
      Parent Component
          <my-button>
          This content will replace the slot
          </my-button>  

  2) Named slots 
      Child Component (MyButton.Vue)
          <div>
          <slot name='top'></slot>
          <slot name='bottom'></slot>
          </div>
          Name Slots in the Parent Component
          <my-button>
          <template v-slot:top> // ...
          </template>
          <template v-slot:bottom> // ...
          </template>
          </my-button>
  3) SCOPED SLOTS
          Give parent component access to child data.
          Child Component (MyButton.Vue)
          <div>
          <slot v-bind:post='post'>
          {{ post.title }}
          </slot>
          </div>

          Parent Has Access to MyButton post data
        <my-button>
        <template v-slot:default='slotData'>
        {{ post.author }}
        </template>
        </my-button>

DYNAMIC COMPONENTS
    Changes the rendered component - finds a registered component with the given name.
    <component :is='componentName'/>
  
KEEP-ALIVE ELEMENTS
Stores a cached version of dynamic components when not visible. Avoids having to create a new component whenever toggled.
    <keep-alive>
    <component :is='componentName'/>
    </keep-alive>

COMPOSITION API
  Everything returned by setup() is exposed to the template.
    import { ref, reactive } from 'vue'
      export default {
        setup(props, context) {
          const val = ref('example')
          const obj = reactive({ count: 0 })
          const evtHandler = () => {/*...*/}
          return {
          val, obj, evtHandler
          }
      }
    }  

SETUP() CONTEXT OBJECT PROPERTIES
  attrs Has component's attributes
  slots Has component's slots
  emit Function to emit events        

VUEJS LIFECYCLE HOOKS
  *beforeCreate Use setup() instead
  *created Use setup() instead
  onBeforeMount Before mounting DOM
  onMounted DOM can be accessed
  onBeforeUpdate Reactive data changes
  onUpdated DOM has been updated
  onBeforeUnmount Component still complete
  onUnmounted Teardown complete        

  ex. 
        import { onMounted } from 'vue'
          // ...
          setup() {
            onMounted(() => {
            console.log('component mounted!')
          }
        }

VUE GLOBAL METHODS
  mount() Mount component to DOM
  forceUpdate() Force re-render
  nextTick() Runs func next update
  destroy() Destroy component/app                      

COMPUTED PROPERTIES
A computed property is a value that is  calculated using one or more other properties.
  setup() {
  const a = ref(1)
  const b = computed(() => a.value * 2)
  return { a, b }
  }                      

WATCHEFFECT()
Listens to reactive dependencies and runs a method when one changes. Also runs on init.
  setup() {
  const site = ref('learnvue.co')
  watchEffect(() => {
  console.log(site.value)
  })
  return { site }
}

TEMPLATE REFS
Give access to DOM elements.
  // template
  <div ref='example'> Example Div </div>
  // script
  setup() {
  const example = ref('learnvue.co')
  // wait for DOM to mount
  onMounted(() => {
  console.log(example.value)
  })
  return { example }
}  

VUE OBJECT API OPTIONS
If you decide not to use the Composition API, your components will look similar to Vue2 with the Options API.
  data() Init reactive data
  props Data visible by parent
  mixins Declares mixins
  components Registers children
  methods Set of Vue methods
  watchers Watch values for change
  computed Cached reactive methods

GREAT VUE UI RESOURCES
  Vuetify Bootstrap Vue UIV
  VueStrap Vue Material Mint UI
  Element UI Vuecidity iView
  Buefy DeepReader KeenUI
  Quasar AT UI Bulma
  Fish-UI Muse UI Vue Blu    
----

8lifecycle hooks: beforecreate, created, beforeMount, mounted, beforeUpdate, updated, beforedestroy, destroyed

v-show : uses DOM behavior, with show
v-if (lazy behavior), v-if destroys and re-enders

  $parent is used to retrieve the parent component
  SFCs or single file components 
      - SFCs have unique names
      - css support 
      - preprocessors like babel can be used in SFCs

  State Mgmt Pattern:-
      - state, view, actions

  How to check if mutation has occured?

  What is a map State helper?

  StyledCompopnents.js can it be used in Vue.js ? Yes. VueJS styled-components.

  Vue CLI: @vue/cli + webpack + plugins

  Instant prototyping?

  What is nextTick method? 
    - to perform  a function

  What are navigation guards in vue router ?
    - Global, per-route, in-component

  What are mix-ins?
    - to flexibily use reuseable components

  Directives in Vue.js
    - general, liberal, empty, custom directives

  What is vue-loader?
    - allows us to create SFCs in vue format

  What is virtual DOM ?

  
  

  
